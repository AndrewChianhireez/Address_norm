
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import plotly.io as pio
import pycountry_convert as pc
import matplotlib as mpl



loc_data = pd.read_csv(r'C:\Users\shizh\Desktop\Internship\Final_sample_10k.csv')
cleaned_vals = loc_data["norm_address"]
USA_vals = loc_data['is_usa'].copy()
city_vals = loc_data['city'].copy()
state_vals = loc_data['state'].copy()
country_vals = loc_data['country'].copy()
location_vals = loc_data['is_location'].copy()
continent_vals = [None]*len(cleaned_vals)
continents = ['AS', 'NA', 'EU','AF','OC','SA', 'None']
mpl.rc('font', family='Consolas')


        
def reduce_multiples(i):
    if len(str(country_vals[i])) > 3 and str(country_vals[i]) != 'nan':
        country_vals[i] = str(country_vals[i])[:3]
# gets rid of edge cases of people putting 2 countries in their location bio

def change_romania(i):
    if str(country_vals[i]) == 'ROM':
        country_vals[i] = 'ROU'
        #the program still uses some old alpha 3 codes, this converts them into the old ones
    
def change_Morroco(i):
    if str(country_vals[i]) == 'MOR':
        country_vals[i] = 'MAR'
        #the program still uses some old alpha 3 codes, this converts them into the old ones

def change_EU(i):
    if str(country_vals[i]) == 'EU':
        country_vals[i] = 'nan'
        #EU isn't a country alpha code, but the ai thinks it is
        
def get_rid_Non(i):
    if str(country_vals[i]) == 'Non':
        country_vals[i] = 'nan'
        #I don't know how None got here, its supposed to be empty if it returns none, but whatever
        
def change_TL(i):
    if str(country_vals[i]) == 'TLS':
        country_vals[i] = 'TP'
        #the program still uses some old alpha 3 codes, this converts them into the old ones
        

def get_continent(i):
    reduce_multiples(i)
    change_EU(i)
    change_Morroco(i)
    change_TL(i)
    change_romania(i)
    get_rid_Non(i)
    if str(country_vals[i]) != 'nan':
        if len(str(country_vals[i])) == 3:
            country_codes = pc.country_alpha3_to_country_alpha2(country_vals[i])
            continent_vals[i] = pc.country_alpha2_to_continent_code(country_codes)
        else:
            continent_vals[i] = pc.country_alpha2_to_continent_code(country_vals[i])
    #Gets the continent values by converting country alpha 3 code to continent code   
    
def get_frequency(value_list, value):
    freq = 0
    for i in range(len(value_list)):
        if str(value_list[i]) == value:
            freq += 1
    return freq
    #gets the frequency from a list given a value
    
    
def get_continent_freq():
    cont_frequency = []
    for i in range(len(continents)):
        cont_frequency.append(get_frequency(continent_vals, continents[i]))
    return cont_frequency
    #gets continent frequency
    
def get_continent_vals():         
    for i in range(len(cleaned_vals)):
        get_continent(i)
        #converts the country alpha codes to continents

def get_pie_labels():
    pie_labels = []
    freq_list = get_continent_freq()
    for i in range(len(continents)):
        label_val = continents[i] + '-' + str(round(freq_list[i]/sum(freq_list)*100,1)) + '%'
        pie_labels.append(label_val)
    return pie_labels
    #gets the pie chart labels
    

get_continent_vals()
print(get_continent_freq())

fig = plt.figure()
ax1 = fig.add_subplot(111)
ax1 = plt.pie(get_continent_freq())
ax1 = plt.legend(get_pie_labels(), fontsize='small', loc='upper left')
ax1 = plt.title('Continent Distribution graph')
plt.savefig(r'C:\Users\shizh\Desktop\Internship/pie_graph.pdf')
#this is placeholder, change it to whatever you like.
